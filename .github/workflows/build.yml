name: Build SMV-Extracter

on:
  push:
    branches: [ main, dev-build ]  
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev-build ]  
  workflow_dispatch:  

jobs:
  build:
    timeout-minutes: 60  
    strategy:
      matrix:
        os: [windows-latest]  
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"  
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~\AppData\Local\uv\Cache
        key: ${{ runner.os }}-uv-${{ hashFiles('requirements-minimal.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Debug Python environment
      run: |
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import platform; print('Platform:', platform.platform())"
        pip --version
    
    - name: Install system dependencies (Windows)
      run: |
        
        choco install ffmpeg -y
      timeout-minutes: 5
    
    - name: Install Python dependencies
      run: |
        
        
        python -m pip install uv
        
        
        uv venv
        
        
        if (Test-Path ".venv\Scripts\Activate.ps1") {
          .\.venv\Scripts\Activate.ps1
          uv pip install -r requirements-minimal.txt
          
        } else {
          
          exit 1
        }
      timeout-minutes: 10  
    
    - name: Verify dependencies
      run: |
        
        if (Test-Path ".venv\Scripts\Activate.ps1") {
          .\.venv\Scripts\Activate.ps1
          python -c "import customtkinter; print('CustomTkinter:', customtkinter.__version__)"
          python -c "import yt_dlp; print('yt-dlp:', yt_dlp.version.__version__)"
          python -c "import moviepy; print('MoviePy:', moviepy.__version__)"
          python -c "import numpy; print('NumPy:', numpy.__version__)"
          python -c "import PIL; print('Pillow:', PIL.__version__)"
          python -c "import sv_ttk; print('sv_ttk: imported successfully')"
          
        } else {
          
          exit 1
        }
    
    - name: Build with PyInstaller
      run: |
        
        if (Test-Path ".venv\Scripts\Activate.ps1") {
          .\.venv\Scripts\Activate.ps1
          python build_pyinstaller.py
        } else {
          
          exit 1
        }
      timeout-minutes: 15  
    
    - name: Verify PyInstaller output
      run: |
        echo "Checking PyInstaller build output:"
        if (Test-Path "dist\SMV-Extracter-windows-x64.exe") {
          
          $exeSize = (Get-Item "dist\SMV-Extracter-windows-x64.exe").Length / 1MB
          
        } else {
          
          
          if (Test-Path "dist") { dir dist -Recurse } else { 
          exit 1
        }
    
    - name: Verify build artifacts
      run: |
        echo "Build Results:"
        echo "Directory listing of dist:"
        dir dist
        if (Test-Path "dist\SMV-Extracter-windows-x64.exe") {
          echo "âœ“ Single executable found"
          $exeSize = (Get-Item "dist\SMV-Extracter-windows-x64.exe").Length / 1MB
          
        } else {
          
          exit 1
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SMV-Extracter-${{ matrix.platform }}-x64
        path: |
          dist/SMV-Extracter-windows-x64.exe
        retention-days: 30
    
    - name: Get file sizes
      run: |
        echo "Build Results:"
        if (Test-Path "dist\SMV-Extracter-windows-x64.exe") {
          $exeSize = (Get-Item "dist\SMV-Extracter-windows-x64.exe").Length / 1MB
          
        }

  release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        body: |

          **Usage:**
          1. Download the executable
          2. Run directly - no installation needed
          3. First run may be slower due to extraction

        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
