name: Build SMV-Extracter Cross-Platform

on:
  push:
    branches: [ main, dev-build ]  # Add dev-build branch
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev-build ]  # Add dev-build branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            installer: .bat
          - os: ubuntu-latest
            platform: linux
            extension: ""
            installer: .sh
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Use 3.12 for better compatibility with latest packages
    
    - name: Debug Python environment
      run: |
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import platform; print('Platform:', platform.platform())"
        pip --version
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download and install ffmpeg for Windows
        curl -L https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip -o ffmpeg.zip
        7z x ffmpeg.zip
        move ffmpeg-master-latest-win64-gpl ffmpeg
        echo "${{ github.workspace }}\ffmpeg\bin" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install nuitka
        # Try CI requirements first, fallback to minimal if needed
        pip install -r requirements-ci.txt || pip install -r requirements-minimal.txt
    
    - name: Verify dependencies
      run: |
        python -c "import customtkinter; print('‚úÖ CustomTkinter:', customtkinter.__version__)"
        python -c "import yt_dlp; print('‚úÖ yt-dlp:', yt_dlp.version.__version__)"
        python -c "import moviepy; print('‚úÖ MoviePy:', moviepy.__version__)"
        python -c "import numpy; print('‚úÖ NumPy:', numpy.__version__)"
        python -c "import PIL; print('‚úÖ Pillow:', PIL.__version__)"
        python -c "import nuitka; print('‚úÖ Nuitka:', nuitka.Version.getNuitkaVersion())"
    
    - name: Build with Nuitka
      run: python build_ci.py
    
    - name: Create installer script
      run: echo "Installer created by build_ci.py"
    
    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        7z a -tzip SMV-Extracter-Windows-x64.zip main.dist install.bat
    
    - name: Package artifacts (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        tar -czf SMV-Extracter-Linux-x64.tar.gz main.dist install.sh
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SMV-Extracter-${{ matrix.platform }}-x64
        path: |
          dist/SMV-Extracter-*-x64.*
        retention-days: 30
    
    - name: Get file sizes
      run: |
        echo "üì¶ Build Results:"
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          ls -lh dist/SMV-Extracter-Linux-x64.tar.gz
          echo "Size: $(du -h dist/SMV-Extracter-Linux-x64.tar.gz | cut -f1)"
        else
          dir dist\SMV-Extracter-Windows-x64.zip
        fi
      shell: bash

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        body: |
          ## SMV-Extracter Cross-Platform Release
          
          **Downloads:**
          - ü™ü **Windows**: `SMV-Extracter-Windows-x64.zip`
          - üêß **Linux**: `SMV-Extracter-Linux-x64.tar.gz`
          
          **Installation:**
          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Run the installer script (`install.bat` or `install.sh`)
          
          **Features:**
          - YouTube video downloader
          - Frame extraction tools
          - Modern GUI interface
          - Cross-platform support
          
          **System Requirements:**
          - Windows 10+ or Ubuntu 18.04+
          - No Python installation required
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
