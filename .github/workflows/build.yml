name: Build SMV-Extracter

on:
  push:
    branches: [ main, dev-build ]  
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev-build ]  
  workflow_dispatch:  

jobs:
  build:
    timeout-minutes: 60  
    strategy:
      matrix:
        os: [windows-latest]  
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            installer: .bat
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify required files
      run: |
        echo "Checking required files..."
        dir
        if (!(Test-Path "requirements-minimal.txt")) { 
          Write-Host "requirements-minimal.txt missing"
          exit 1 
        } else { Write-Host "requirements-minimal.txt found" }
        if (!(Test-Path "build_pyinstaller.py")) { 
          Write-Host "build_pyinstaller.py missing"
          exit 1 
        } else { Write-Host "build_pyinstaller.py found" }
        if (!(Test-Path "main.py")) { 
          Write-Host "main.py missing"
          exit 1 
        } else { Write-Host "main.py found" }
        if (!(Test-Path "hooks\hook-sv_ttk.py")) { 
          Write-Host "hooks\hook-sv_ttk.py missing"
          exit 1 
        } else { Write-Host "hooks\hook-sv_ttk.py found" }
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"  
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~\AppData\Local\uv\Cache
        key: ${{ runner.os }}-uv-${{ hashFiles('requirements-minimal.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Debug Python environment
      run: |
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import platform; print('Platform:', platform.platform())"
        pip --version
    
    - name: Install system dependencies (Windows)
      run: |
        
        choco install ffmpeg -y
      timeout-minutes: 5
    
    - name: Install Python dependencies
      run: |
        # Create uv virtual environment and install dependencies
        Write-Host "Installing uv..."
        python -m pip install uv
        
        Write-Host "Creating virtual environment..."
        uv venv
        
        Write-Host "Installing dependencies from requirements-minimal.txt..."
        if (Test-Path ".venv\Scripts\Activate.ps1") {
          .\.venv\Scripts\Activate.ps1
          uv pip install -r requirements-minimal.txt
          Write-Host "Dependencies installed in virtual environment"
        } else {
          Write-Host "Virtual environment activation failed"
          exit 1
        }
      timeout-minutes: 10  
    
    - name: Verify dependencies
      run: |
        # Verify dependencies are installed in virtual environment
        if (Test-Path ".venv\Scripts\Activate.ps1") {
          .\.venv\Scripts\Activate.ps1
          python -c "import customtkinter; print('CustomTkinter:', customtkinter.__version__)"
          python -c "import yt_dlp; print('yt-dlp:', yt_dlp.version.__version__)"
          python -c "import moviepy; print('MoviePy:', moviepy.__version__)"
          python -c "import numpy; print('NumPy:', numpy.__version__)"
          python -c "import PIL; print('Pillow:', PIL.__version__)"
          python -c "import sv_ttk; print('sv_ttk:', sv_ttk.__version__)"
          Write-Host "All dependencies verified in virtual environment"
        } else {
          Write-Host "Virtual environment not found"
          exit 1
        }
    
    - name: Build with PyInstaller
      run: |
        # Activate virtual environment and run build
        if (Test-Path ".venv\Scripts\Activate.ps1") {
          .\.venv\Scripts\Activate.ps1
          python build_pyinstaller.py
        } else {
          Write-Host "Virtual environment not found"
          exit 1
        }
      timeout-minutes: 15  
    
    - name: Verify PyInstaller output
      run: |
        echo "Checking PyInstaller build output:"
        if (Test-Path "dist\SMV-Extracter-windows-x64\SMV-Extracter-windows-x64.exe") {
          Write-Host " Executable found"
          $exeSize = (Get-Item "dist\SMV-Extracter-windows-x64\SMV-Extracter-windows-x64.exe").Length / 1MB
          Write-Host "Executable size: $([math]::Round($exeSize, 2)) MB"
        } else {
          Write-Host " Executable not found - PyInstaller build may have failed"
          Write-Host "Contents of dist directory:"
          if (Test-Path "dist") { dir dist -Recurse } else { Write-Host "dist directory not found" }
          exit 1
        }  
    
    - name: Verify build artifacts
      run: |
        echo "Build Results:"
        echo "Directory listing of dist:"
        dir dist
        if (Test-Path "dist\SMV-Extracter-windows-x64") {
          echo "Application directory found"
          $appSize = (Get-ChildItem "dist\SMV-Extracter-windows-x64" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "Application size: $([math]::Round($appSize, 2)) MB"
        } else {
          Write-Host "Application directory not found"
          exit 1
        }
        if (Test-Path "dist\SMV-Extracter-Windows-x64.zip") {
          $zipSize = (Get-Item "dist\SMV-Extracter-Windows-x64.zip").Length / 1MB
          Write-Host "ZIP file size: $([math]::Round($zipSize, 2)) MB"
        } else {
          Write-Host "ZIP file not found"
          exit 1
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SMV-Extracter-${{ matrix.platform }}-x64
        path: |
          dist/SMV-Extracter-Windows-x64.zip
          dist/install.bat
        retention-days: 30
    
    - name: Get file sizes
      run: |
        echo "Build Results:"
        dir dist\SMV-Extracter-Windows-x64.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        body: |
          
          **Installation:**
          1. Download the Windows archive
          2. Extract the archive
          3. Run the installer script (`install.bat`)

        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
